#= Preamble
This file contains functions for errors-in-variables linear regression.
=#

export yorkfit

#Caller functions

"""
    yorkfit(df::AbstractDataFrame; [se_level_in::Int=2, se_level_out::Int=2, se_type::AbstractString="abs",
        initial::Any=nothing])

Compute line of best fit using York errors-in-variables linear regression algorithm.

Input df as a DataFrame of 4 of 5 columns wide with column order (X, œÉx, y, œÉy, [œÅxy]).

# Keywords
- `se_level_in::Int`: Standard error level of input data. Provide as a positive integer.
- `se_level_out::Int`: Standard error level of output data. Provide as a positive integer.
- `se_type::AbstractString`: Standard error type as a string of value `"abs"` OR `"rel"`. Values equal to
    `'a'`, `"absolute"`, `'r'`, and `"relative"` will also work. Case insensitive.
- `initial::Any`: A value for the y-intercept. Can be input as a string key from an appropriate dictionary, as a single
    numeric value, or as a vector of the initial and its standard error (same `se_level_in` as input data). E.g. initial =
        "MDCInv", initial = 0.72, OR initial = [0.72, 0.01].
    - Dictionaries available are `dict_sr87_sr86i`
    - For a full list of available keys in any dictionary type `keys(<dict_name>)`

# Example
```julia-repl
julia> york(df, 2, "abs"; initial = "MDCInv")

```

# References
York D. et al. 2004 "Unified equations for the slope, intercept, and standard errors of the best straight line", *American
Journal of Physics*, 72(3), doi:https://doi.org/10.1119/1.1632486.

"""
function yorkfit(
    df::AbstractDataFrame;
    se_level_in::Int = 2,
    # se_level_out::Int = 2,
    se_type::AbstractString = "abs",
    initial::Any = nothing,
)
    dfCols::Int = ncol(df)
    dfRows::Int = nrow(df)
    if initial !== nothing
        if isa(initial, String) == true && haskey(dict_sr87_sr86i, initial) == true
            initial = deepcopy(dict_sr87_sr86i[initial])
        elseif length(initial) == 1 && isa(initial, AbstractFloat)
            initial = [1e-15, 1e-15, initial, 0.01]
        elseif length(initial) == 2 && isa(initial[1], AbstractFloat) && isa(initial[2], AbstractFloat)
            initial = [1e-15, 1e-15, initial[1], initial[2]]
        elseif length(initial) >= 3
            throw(ArgumentError("Only the initial ratio value and its uncertainty is required."))
        else
            throw(ArgumentError("""
            initial variable is malformed.
            Use either a string that matches a fixed value or reference material name:
                e.g. "MDC", "MDCInv", or "SolarSystem"
            Or input a single numeric value or two-length numeric vector:
                e.g. 0.72 or [0.7200, 0.0010]

            For a full list of available reference material keys in a relevant dictionary: keys(<dict_name>)

            Dictionaries currently available are `dict_sr87_sr86i`
            """))
        end
        if dfCols == 4
            push!(df, initial)
        elseif dfCols == 5
            push!(initial, 0)
            push!(df, initial)
        end
    end
    if occursin('a', lowercase.(se_type)) == true ||
        occursin("abs", lowercase.(se_type)) == true ||
        occursin("absolute", lowercase.(se_type)) == true
        if dfCols == 5
            yfit = _eivlr_york(
                df[!, 1], df[!, 2] ./ se_level_in, df[!, 3], df[!, 4] ./ se_level_in, df[!, 5]
            )
        elseif dfCols == 4
            yfit = _eivlr_york(
                df[!, 1], df[!, 2] ./ se_level_in, df[!, 3], df[!, 4] ./ se_level_in
            )
        else
            throw(ArgumentError("Column width is not equal to 4 or 5. Some data is missing."))
        end
    elseif occursin('r', lowercase.(se_type)) == true ||
        occursin("rel", lowercase.(se_type)) == true ||
        occursin("relative", lowercase.(se_type)) == true
        if dfCols == 5
            yfit = _eivlr_york(
                df[!, 1],
                (df[!, 2] .* df[!, 1]) ./ se_level_in,
                df[!, 3],
                (df[!, 4] .* df[!, 3]) ./ se_level_in,
                df[!, 5],
            )
        elseif dfCols == 4
            yfit = _eivlr_york(
                df[!, 1], (df[!, 2] .* df[!, 1]) ./ se_level_in, df[!, 3], (df[!, 4] .* df[!, 3]) ./ se_level_in
            )
        else
            throw(ArgumentError("Column width is not equal to 4 or 5. Some data is missing."))
        end
    end
    if initial !== nothing
        popat!(df, dfRows + 1)
    end
    return yfit
end

function _eivlr_york(x::Vector{<:Real}, œÉx::Vector{<:Real}, y::Vector{<:Real}, œÉy::Vector{<:Real}, œÅxy::Union{Nothing, Vector{<:Real}} = nothing)
    if _check_equal_length(x, œÉx, y, œÉy) != true
        throw(ArgumentError("The length of x, œÉx, y and œÉy must be the same."))
    end
    ùëÅ::Int = length(x)
    if œÅxy === nothing
        œÅxy::Vector{Float64} = zeros(ùëÅ)
    elseif length(œÅxy) !== ùëÅ
        throw(ArgumentError("The length of œÅxy must be the same as x, œÉx, y and œÉy."))
    end

    # initial slope and intercept from OLS
    Œ≤‚ÇÄ::Float64, Œ≤‚ÇÅ::Float64 = hcat(ones(ùëÅ), x) \ y
    Œ≤‚Çë::Float64 = Œ≤‚ÇÅ

    # weights
    œâx::Vector{Float64} = @. 1.0 / œÉx ^ 2
    œây::Vector{Float64} = @. 1.0 / œÉy ^ 2

    # initial fit via York method
    Œ±::Vector{Float64} = sqrt.(œâx .* œây)
    Œ©::Vector{Float64} = @. œâx * œây / (œâx + Œ≤‚ÇÅ^2 * œây - 2 * Œ≤‚ÇÅ * œÅxy * Œ±)
    xÃÑ::Float64 = sum(Œ© .* x) / sum(Œ©)
    yÃÑ::Float64 = sum(Œ© .* y) / sum(Œ©)
    u::Vector{Float64} = x .- xÃÑ
    v::Vector{Float64} = y .- yÃÑ
    Œ≤·µ¢::Vector{Float64} = @. Œ© * (u / œây + Œ≤‚ÇÅ * v / œâx - (Œ≤‚ÇÅ * u + v) * œÅxy / Œ±)
    Œ≤‚ÇÅ = sum(Œ© .* Œ≤·µ¢ .* v) / sum(Œ© .* Œ≤·µ¢ .* u)

    n_iterations::Int = 1
    # iterative solve via York method
    while (Œ≤‚Çë / Œ≤‚ÇÅ - 1)^2 > eps() && n_iterations < 1e6
        Œ© = @. œâx * œây / (œâx + Œ≤‚ÇÅ^2 * œây - 2 * Œ≤‚ÇÅ * œÅxy * Œ±)
        xÃÑ = sum(Œ© .* x) / sum(Œ©)
        yÃÑ = sum(Œ© .* y) / sum(Œ©)
        u = x .- xÃÑ
        v = y .- yÃÑ
        Œ≤·µ¢ = @. Œ© * (u / œây + Œ≤‚ÇÅ * v / œâx - (Œ≤‚ÇÅ * u + v) * œÅxy / Œ±)
        Œ≤‚Çë = Œ≤‚ÇÅ
        Œ≤‚ÇÅ = sum(Œ© .* Œ≤·µ¢ .* v) / sum(Œ© .* Œ≤·µ¢ .* u)
        n_iterations += 1
    end
    Œ≤‚ÇÄ = yÃÑ - Œ≤‚ÇÅ * xÃÑ
    x·µ¢::Vector{Float64} = xÃÑ .+ Œ≤·µ¢
    xÃÑ = sum(Œ© .* x·µ¢) / sum(Œ©)
    u = x·µ¢ .- xÃÑ
    Œ≤‚ÇÅSE::Float64 = ‚àö(1 / sum(Œ© .* u .^ 2))
    Œ≤‚ÇÄSE::Float64 = ‚àö(1 / sum(Œ©) + (xÃÑ * Œ≤‚ÇÅSE)^2)
    œÉ·µ¶‚ÇÅ·µ¶‚ÇÄ::Float64 = - xÃÑ * Œ≤‚ÇÅSE^2
    œá¬≤::Float64 = sum(Œ© .* (y .- Œ≤‚ÇÅ .* x .- Œ≤‚ÇÄ) .^ 2)
    ŒΩ::Int = ùëÅ > 2 ? ùëÅ - 2 : 1
    œá¬≤·µ£::Float64 = œá¬≤ / ŒΩ
    pval::Float64 = ccdf(Chisq(ŒΩ), œá¬≤)
    x_intercept::Float64 = -Œ≤‚ÇÄ / Œ≤‚ÇÅ
    x_intercept_se::Float64 = sqrt((Œ≤‚ÇÄSE / Œ≤‚ÇÄ)^2 + (Œ≤‚ÇÅSE / Œ≤‚ÇÅ)^2 - 2 * œÉ·µ¶‚ÇÅ·µ¶‚ÇÄ / (Œ≤‚ÇÄ * Œ≤‚ÇÅ))
    return York(Œ≤‚ÇÄ, Œ≤‚ÇÄSE, Œ≤‚ÇÅ, Œ≤‚ÇÅSE, x_intercept, x_intercept_se, œá¬≤·µ£, pval, œÉ·µ¶‚ÇÅ·µ¶‚ÇÄ, ùëÅ, xÃÑ, yÃÑ)
end
